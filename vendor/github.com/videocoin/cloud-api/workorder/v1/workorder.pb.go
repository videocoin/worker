// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workorder/v1/workorder.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import v1 "github.com/videocoin/cloud-api/profiles/v1"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WorkOrderStatus int32

const (
	WorkOrderStatusNone       WorkOrderStatus = 0
	WorkOrderStatusNew        WorkOrderStatus = 1
	WorkOrderStatusPending    WorkOrderStatus = 2
	WorkOrderStatusProcessing WorkOrderStatus = 3
	WorkOrderStatusReady      WorkOrderStatus = 4
	WorkOrderStatusComplete   WorkOrderStatus = 5
	WorkOrderStatusCanceled   WorkOrderStatus = 6
	WorkOrderStatusFailed     WorkOrderStatus = 7
)

var WorkOrderStatus_name = map[int32]string{
	0: "none",
	1: "new",
	2: "pending",
	3: "processing",
	4: "ready",
	5: "complete",
	6: "canceld",
	7: "failed",
}
var WorkOrderStatus_value = map[string]int32{
	"none":       0,
	"new":        1,
	"pending":    2,
	"processing": 3,
	"ready":      4,
	"complete":   5,
	"canceld":    6,
	"failed":     7,
}

func (x WorkOrderStatus) String() string {
	return proto.EnumName(WorkOrderStatus_name, int32(x))
}
func (WorkOrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_workorder_85dae9c5fed85800, []int{0}
}

type IngestStatus int32

const (
	IngestStatusNone     IngestStatus = 0
	IngestStatusActive   IngestStatus = 1
	IngestStatusInactive IngestStatus = 2
	IngestStatusError    IngestStatus = 3
)

var IngestStatus_name = map[int32]string{
	0: "ingest_status_none",
	1: "ingest_status_active",
	2: "ingest_status_inactive",
	3: "ingest_status_error",
}
var IngestStatus_value = map[string]int32{
	"ingest_status_none":     0,
	"ingest_status_active":   1,
	"ingest_status_inactive": 2,
	"ingest_status_error":    3,
}

func (x IngestStatus) String() string {
	return proto.EnumName(IngestStatus_name, int32(x))
}
func (IngestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_workorder_85dae9c5fed85800, []int{1}
}

type WorkOrder struct {
	Id                   uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PipelineId           string          `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	TranscoderId         string          `protobuf:"bytes,3,opt,name=transcoder_id,json=transcoderId,proto3" json:"transcoder_id,omitempty"`
	ProfileId            v1.ProfileId    `protobuf:"varint,4,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	ClientAddress        string          `protobuf:"bytes,5,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	StreamAddress        string          `protobuf:"bytes,6,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	StreamId             int64           `protobuf:"varint,7,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	TranscodeInputUrl    string          `protobuf:"bytes,8,opt,name=transcode_input_url,json=transcodeInputUrl,proto3" json:"transcode_input_url,omitempty"`
	IngestInputUrl       string          `protobuf:"bytes,9,opt,name=ingest_input_url,json=ingestInputUrl,proto3" json:"ingest_input_url,omitempty"`
	TranscodeOutputUrl   string          `protobuf:"bytes,10,opt,name=transcode_output_url,json=transcodeOutputUrl,proto3" json:"transcode_output_url,omitempty"`
	Status               WorkOrderStatus `protobuf:"varint,11,opt,name=status,proto3,enum=cloud.api.workorder.v1.WorkOrderStatus" json:"status,omitempty"`
	Chunks               []byte          `protobuf:"bytes,12,opt,name=chunks,proto3" json:"chunks,omitempty" gorm:"chunks;type:json"sql:"type:json"`
	CreatedAt            int64           `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64           `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Worker               []byte          `protobuf:"bytes,15,opt,name=worker,proto3" json:"worker,omitempty" gorm:"worker;type:binary(32);DEFAULT:NULL"sql:"type:binary(32);DEFAULT:null"`
	Refunded             bool            `protobuf:"varint,20,opt,name=refunded,proto3" json:"refunded,omitempty"`
	IngestStatus         IngestStatus    `protobuf:"varint,21,opt,name=ingest_status,json=ingestStatus,proto3,enum=cloud.api.workorder.v1.IngestStatus" json:"ingest_status,omitempty"`
	StreamHash           string          `protobuf:"bytes,22,opt,name=stream_hash,json=streamHash,proto3" json:"stream_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WorkOrder) Reset()         { *m = WorkOrder{} }
func (m *WorkOrder) String() string { return proto.CompactTextString(m) }
func (*WorkOrder) ProtoMessage()    {}
func (*WorkOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_workorder_85dae9c5fed85800, []int{0}
}
func (m *WorkOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WorkOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkOrder.Merge(dst, src)
}
func (m *WorkOrder) XXX_Size() int {
	return m.Size()
}
func (m *WorkOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkOrder.DiscardUnknown(m)
}

var xxx_messageInfo_WorkOrder proto.InternalMessageInfo

func (m *WorkOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WorkOrder) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *WorkOrder) GetTranscoderId() string {
	if m != nil {
		return m.TranscoderId
	}
	return ""
}

func (m *WorkOrder) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (m *WorkOrder) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *WorkOrder) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *WorkOrder) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *WorkOrder) GetTranscodeInputUrl() string {
	if m != nil {
		return m.TranscodeInputUrl
	}
	return ""
}

func (m *WorkOrder) GetIngestInputUrl() string {
	if m != nil {
		return m.IngestInputUrl
	}
	return ""
}

func (m *WorkOrder) GetTranscodeOutputUrl() string {
	if m != nil {
		return m.TranscodeOutputUrl
	}
	return ""
}

func (m *WorkOrder) GetStatus() WorkOrderStatus {
	if m != nil {
		return m.Status
	}
	return WorkOrderStatusNone
}

func (m *WorkOrder) GetChunks() []byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *WorkOrder) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *WorkOrder) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *WorkOrder) GetWorker() []byte {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (m *WorkOrder) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

func (m *WorkOrder) GetIngestStatus() IngestStatus {
	if m != nil {
		return m.IngestStatus
	}
	return IngestStatusNone
}

func (m *WorkOrder) GetStreamHash() string {
	if m != nil {
		return m.StreamHash
	}
	return ""
}

func (*WorkOrder) XXX_MessageName() string {
	return "cloud.api.workorder.v1.WorkOrder"
}

type JobProfile struct {
	Id                   uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PipelineId           string          `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	ProfileId            v1.ProfileId    `protobuf:"varint,3,opt,name=profile_id,json=profileId,proto3,enum=cloud.api.profiles.v1.ProfileId" json:"profile_id,omitempty"`
	IngestInputUrl       string          `protobuf:"bytes,4,opt,name=ingest_input_url,json=ingestInputUrl,proto3" json:"ingest_input_url,omitempty"`
	TranscodeOutputUrl   string          `protobuf:"bytes,5,opt,name=transcode_output_url,json=transcodeOutputUrl,proto3" json:"transcode_output_url,omitempty"`
	ClientAddress        string          `protobuf:"bytes,6,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	StreamId             int64           `protobuf:"varint,7,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamAddress        string          `protobuf:"bytes,8,opt,name=stream_address,json=streamAddress,proto3" json:"stream_address,omitempty"`
	Status               WorkOrderStatus `protobuf:"varint,9,opt,name=status,proto3,enum=cloud.api.workorder.v1.WorkOrderStatus" json:"status,omitempty"`
	IngestStatus         IngestStatus    `protobuf:"varint,10,opt,name=ingest_status,json=ingestStatus,proto3,enum=cloud.api.workorder.v1.IngestStatus" json:"ingest_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *JobProfile) Reset()         { *m = JobProfile{} }
func (m *JobProfile) String() string { return proto.CompactTextString(m) }
func (*JobProfile) ProtoMessage()    {}
func (*JobProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_workorder_85dae9c5fed85800, []int{1}
}
func (m *JobProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JobProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobProfile.Merge(dst, src)
}
func (m *JobProfile) XXX_Size() int {
	return m.Size()
}
func (m *JobProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_JobProfile.DiscardUnknown(m)
}

var xxx_messageInfo_JobProfile proto.InternalMessageInfo

func (m *JobProfile) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JobProfile) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *JobProfile) GetProfileId() v1.ProfileId {
	if m != nil {
		return m.ProfileId
	}
	return v1.ProfileIdNone
}

func (m *JobProfile) GetIngestInputUrl() string {
	if m != nil {
		return m.IngestInputUrl
	}
	return ""
}

func (m *JobProfile) GetTranscodeOutputUrl() string {
	if m != nil {
		return m.TranscodeOutputUrl
	}
	return ""
}

func (m *JobProfile) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *JobProfile) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *JobProfile) GetStreamAddress() string {
	if m != nil {
		return m.StreamAddress
	}
	return ""
}

func (m *JobProfile) GetStatus() WorkOrderStatus {
	if m != nil {
		return m.Status
	}
	return WorkOrderStatusNone
}

func (m *JobProfile) GetIngestStatus() IngestStatus {
	if m != nil {
		return m.IngestStatus
	}
	return IngestStatusNone
}

func (*JobProfile) XXX_MessageName() string {
	return "cloud.api.workorder.v1.JobProfile"
}

type JobProfiles struct {
	JobProfiles          []*JobProfile `protobuf:"bytes,1,rep,name=job_profiles,json=jobProfiles,proto3" json:"job_profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *JobProfiles) Reset()         { *m = JobProfiles{} }
func (m *JobProfiles) String() string { return proto.CompactTextString(m) }
func (*JobProfiles) ProtoMessage()    {}
func (*JobProfiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_workorder_85dae9c5fed85800, []int{2}
}
func (m *JobProfiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobProfiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobProfiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JobProfiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobProfiles.Merge(dst, src)
}
func (m *JobProfiles) XXX_Size() int {
	return m.Size()
}
func (m *JobProfiles) XXX_DiscardUnknown() {
	xxx_messageInfo_JobProfiles.DiscardUnknown(m)
}

var xxx_messageInfo_JobProfiles proto.InternalMessageInfo

func (m *JobProfiles) GetJobProfiles() []*JobProfile {
	if m != nil {
		return m.JobProfiles
	}
	return nil
}

func (*JobProfiles) XXX_MessageName() string {
	return "cloud.api.workorder.v1.JobProfiles"
}
func init() {
	proto.RegisterType((*WorkOrder)(nil), "cloud.api.workorder.v1.WorkOrder")
	golang_proto.RegisterType((*WorkOrder)(nil), "cloud.api.workorder.v1.WorkOrder")
	proto.RegisterType((*JobProfile)(nil), "cloud.api.workorder.v1.JobProfile")
	golang_proto.RegisterType((*JobProfile)(nil), "cloud.api.workorder.v1.JobProfile")
	proto.RegisterType((*JobProfiles)(nil), "cloud.api.workorder.v1.JobProfiles")
	golang_proto.RegisterType((*JobProfiles)(nil), "cloud.api.workorder.v1.JobProfiles")
	proto.RegisterEnum("cloud.api.workorder.v1.WorkOrderStatus", WorkOrderStatus_name, WorkOrderStatus_value)
	golang_proto.RegisterEnum("cloud.api.workorder.v1.WorkOrderStatus", WorkOrderStatus_name, WorkOrderStatus_value)
	proto.RegisterEnum("cloud.api.workorder.v1.IngestStatus", IngestStatus_name, IngestStatus_value)
	golang_proto.RegisterEnum("cloud.api.workorder.v1.IngestStatus", IngestStatus_name, IngestStatus_value)
}
func (m *WorkOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.Id))
	}
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if len(m.TranscoderId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.TranscoderId)))
		i += copy(dAtA[i:], m.TranscoderId)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.ProfileId))
	}
	if len(m.ClientAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.ClientAddress)))
		i += copy(dAtA[i:], m.ClientAddress)
	}
	if len(m.StreamAddress) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.StreamAddress)))
		i += copy(dAtA[i:], m.StreamAddress)
	}
	if m.StreamId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.StreamId))
	}
	if len(m.TranscodeInputUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.TranscodeInputUrl)))
		i += copy(dAtA[i:], m.TranscodeInputUrl)
	}
	if len(m.IngestInputUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.IngestInputUrl)))
		i += copy(dAtA[i:], m.IngestInputUrl)
	}
	if len(m.TranscodeOutputUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.TranscodeOutputUrl)))
		i += copy(dAtA[i:], m.TranscodeOutputUrl)
	}
	if m.Status != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.Status))
	}
	if len(m.Chunks) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.Chunks)))
		i += copy(dAtA[i:], m.Chunks)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.UpdatedAt))
	}
	if len(m.Worker) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.Worker)))
		i += copy(dAtA[i:], m.Worker)
	}
	if m.Refunded {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Refunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IngestStatus != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.IngestStatus))
	}
	if len(m.StreamHash) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.StreamHash)))
		i += copy(dAtA[i:], m.StreamHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JobProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.Id))
	}
	if len(m.PipelineId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.PipelineId)))
		i += copy(dAtA[i:], m.PipelineId)
	}
	if m.ProfileId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.ProfileId))
	}
	if len(m.IngestInputUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.IngestInputUrl)))
		i += copy(dAtA[i:], m.IngestInputUrl)
	}
	if len(m.TranscodeOutputUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.TranscodeOutputUrl)))
		i += copy(dAtA[i:], m.TranscodeOutputUrl)
	}
	if len(m.ClientAddress) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.ClientAddress)))
		i += copy(dAtA[i:], m.ClientAddress)
	}
	if m.StreamId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.StreamId))
	}
	if len(m.StreamAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(len(m.StreamAddress)))
		i += copy(dAtA[i:], m.StreamAddress)
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.Status))
	}
	if m.IngestStatus != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintWorkorder(dAtA, i, uint64(m.IngestStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JobProfiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobProfiles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobProfiles) > 0 {
		for _, msg := range m.JobProfiles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorkorder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWorkorder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WorkOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWorkorder(uint64(m.Id))
	}
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	l = len(m.TranscoderId)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovWorkorder(uint64(m.ProfileId))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	l = len(m.StreamAddress)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovWorkorder(uint64(m.StreamId))
	}
	l = len(m.TranscodeInputUrl)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	l = len(m.IngestInputUrl)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	l = len(m.TranscodeOutputUrl)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWorkorder(uint64(m.Status))
	}
	l = len(m.Chunks)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovWorkorder(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovWorkorder(uint64(m.UpdatedAt))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.Refunded {
		n += 3
	}
	if m.IngestStatus != 0 {
		n += 2 + sovWorkorder(uint64(m.IngestStatus))
	}
	l = len(m.StreamHash)
	if l > 0 {
		n += 2 + l + sovWorkorder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWorkorder(uint64(m.Id))
	}
	l = len(m.PipelineId)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.ProfileId != 0 {
		n += 1 + sovWorkorder(uint64(m.ProfileId))
	}
	l = len(m.IngestInputUrl)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	l = len(m.TranscodeOutputUrl)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovWorkorder(uint64(m.StreamId))
	}
	l = len(m.StreamAddress)
	if l > 0 {
		n += 1 + l + sovWorkorder(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWorkorder(uint64(m.Status))
	}
	if m.IngestStatus != 0 {
		n += 1 + sovWorkorder(uint64(m.IngestStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobProfiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobProfiles) > 0 {
		for _, e := range m.JobProfiles {
			l = e.Size()
			n += 1 + l + sovWorkorder(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkorder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkorder(x uint64) (n int) {
	return sovWorkorder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscoderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscoderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (v1.ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscodeInputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscodeInputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestInputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngestInputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscodeOutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscodeOutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (WorkOrderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunks == nil {
				m.Chunks = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = append(m.Worker[:0], dAtA[iNdEx:postIndex]...)
			if m.Worker == nil {
				m.Worker = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refunded = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestStatus", wireType)
			}
			m.IngestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IngestStatus |= (IngestStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (v1.ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestInputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngestInputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscodeOutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscodeOutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (WorkOrderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngestStatus", wireType)
			}
			m.IngestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IngestStatus |= (IngestStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobProfiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkorder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobProfiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobProfiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkorder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobProfiles = append(m.JobProfiles, &JobProfile{})
			if err := m.JobProfiles[len(m.JobProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkorder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkorder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkorder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkorder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkorder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWorkorder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkorder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkorder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkorder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkorder   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("workorder/v1/workorder.proto", fileDescriptor_workorder_85dae9c5fed85800)
}
func init() {
	golang_proto.RegisterFile("workorder/v1/workorder.proto", fileDescriptor_workorder_85dae9c5fed85800)
}

var fileDescriptor_workorder_85dae9c5fed85800 = []byte{
	// 947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x43, 0xc9, 0x96, 0xa5, 0xb1, 0xa4, 0x30, 0x1b, 0x59, 0x66, 0x98, 0x46, 0x66, 0x95,
	0xb6, 0x61, 0x8c, 0x5a, 0x8a, 0x9d, 0x5e, 0xea, 0x1c, 0x02, 0xb9, 0x75, 0x50, 0x15, 0x46, 0x62,
	0xa8, 0x31, 0x0a, 0xf4, 0x22, 0x50, 0xdc, 0xb5, 0xb4, 0x36, 0xbd, 0xcb, 0x2e, 0x49, 0x19, 0x7e,
	0x83, 0x42, 0xef, 0xa0, 0x53, 0xfb, 0x14, 0x3d, 0xf5, 0x98, 0x53, 0xd1, 0xbe, 0x40, 0x50, 0x38,
	0x87, 0x02, 0x3d, 0xe6, 0x09, 0x0a, 0x2e, 0x29, 0x4a, 0xa2, 0xe5, 0x00, 0xce, 0x6d, 0x77, 0xfe,
	0xbf, 0x19, 0xce, 0xce, 0x07, 0x08, 0x9f, 0x9c, 0x73, 0x71, 0xca, 0x05, 0x26, 0xa2, 0x39, 0xdc,
	0x6e, 0x26, 0x97, 0x86, 0x2b, 0xb8, 0xcf, 0x51, 0xd5, 0x76, 0x78, 0x80, 0x1b, 0x96, 0x4b, 0x1b,
	0x53, 0x69, 0xb8, 0xad, 0x6f, 0xf5, 0xa9, 0x3f, 0x08, 0x7a, 0x0d, 0x9b, 0x9f, 0x35, 0xfb, 0xbc,
	0xcf, 0x9b, 0x12, 0xef, 0x05, 0xc7, 0xf2, 0x26, 0x2f, 0xf2, 0x14, 0x85, 0xd1, 0xbf, 0x9e, 0xc1,
	0x87, 0x14, 0x13, 0x6e, 0x73, 0xca, 0x9a, 0x32, 0xf6, 0x96, 0xe5, 0xd2, 0xd0, 0xfb, 0x98, 0x3a,
	0xc4, 0x0b, 0x53, 0x98, 0x9c, 0x23, 0xd7, 0xfa, 0x9f, 0x39, 0x28, 0xfc, 0xc8, 0xc5, 0xe9, 0xab,
	0xf0, 0xd3, 0xa8, 0x0c, 0x19, 0x8a, 0x35, 0xc5, 0x50, 0xcc, 0x52, 0x27, 0x43, 0x31, 0xda, 0x80,
	0x55, 0x97, 0xba, 0xc4, 0xa1, 0x8c, 0x74, 0x29, 0xd6, 0x32, 0x86, 0x62, 0x16, 0x3a, 0x30, 0x31,
	0xb5, 0x31, 0x7a, 0x08, 0x25, 0x5f, 0x58, 0xcc, 0xb3, 0x39, 0x26, 0x22, 0x44, 0xb2, 0x12, 0x29,
	0x4e, 0x8d, 0x6d, 0x8c, 0x9e, 0x03, 0xc4, 0x5f, 0x0d, 0x89, 0x25, 0x43, 0x31, 0xcb, 0x3b, 0x46,
	0x63, 0xfa, 0xf4, 0x24, 0xa5, 0xe1, 0x76, 0xe3, 0x30, 0x3a, 0xb7, 0x71, 0xa7, 0xe0, 0x4e, 0x8e,
	0xe8, 0x73, 0x28, 0xdb, 0x0e, 0x25, 0xcc, 0xef, 0x5a, 0x18, 0x0b, 0xe2, 0x79, 0xda, 0xb2, 0xfc,
	0x4c, 0x29, 0xb2, 0xb6, 0x22, 0x63, 0x88, 0x79, 0xbe, 0x20, 0xd6, 0x59, 0x82, 0xe5, 0x22, 0x2c,
	0xb2, 0x4e, 0xb0, 0xfb, 0x50, 0x88, 0x31, 0x8a, 0xb5, 0x15, 0x43, 0x31, 0xb3, 0x9d, 0x7c, 0x64,
	0x68, 0x63, 0xd4, 0x80, 0xbb, 0x49, 0xee, 0x5d, 0xca, 0xdc, 0xc0, 0xef, 0x06, 0xc2, 0xd1, 0xf2,
	0x32, 0xd0, 0x9d, 0x44, 0x6a, 0x87, 0xca, 0x91, 0x70, 0x90, 0x09, 0x2a, 0x65, 0x7d, 0xe2, 0xf9,
	0x33, 0x70, 0x41, 0xc2, 0xe5, 0xc8, 0x9e, 0x90, 0x4f, 0xa0, 0x32, 0x8d, 0xcc, 0x03, 0x7f, 0x42,
	0x83, 0xa4, 0x51, 0xa2, 0xbd, 0x92, 0x52, 0xe8, 0xf1, 0x1c, 0x72, 0x9e, 0x6f, 0xf9, 0x81, 0xa7,
	0xad, 0xca, 0x9a, 0x3d, 0x6a, 0x2c, 0x1e, 0x97, 0x46, 0xd2, 0xc0, 0x1f, 0x24, 0xde, 0x89, 0xdd,
	0xd0, 0x1e, 0xe4, 0xec, 0x41, 0xc0, 0x4e, 0x3d, 0xad, 0x68, 0x28, 0x66, 0x71, 0x6f, 0xf3, 0xfd,
	0xdb, 0x8d, 0x2f, 0xfa, 0x5c, 0x9c, 0xed, 0xd6, 0x23, 0xfb, 0x33, 0xff, 0xc2, 0x25, 0xbb, 0x27,
	0x1e, 0x67, 0x75, 0xef, 0x67, 0x67, 0xb7, 0x3e, 0xbd, 0x76, 0x62, 0x4f, 0xf4, 0x00, 0xc0, 0x16,
	0xc4, 0xf2, 0x09, 0xee, 0x5a, 0xbe, 0x56, 0x92, 0xe5, 0x2a, 0xc4, 0x96, 0x96, 0x1f, 0xca, 0x81,
	0x8b, 0x27, 0x72, 0x39, 0x92, 0x63, 0x4b, 0xcb, 0x47, 0x03, 0xc8, 0x85, 0x99, 0x12, 0xa1, 0xdd,
	0x96, 0x19, 0x1c, 0xbe, 0x7f, 0xbb, 0x71, 0x10, 0x65, 0x10, 0xd9, 0xa3, 0x0c, 0x7a, 0x94, 0x59,
	0xe2, 0xc2, 0x7c, 0xba, 0xf3, 0xf8, 0xd9, 0xb7, 0xfb, 0x2f, 0x5a, 0x47, 0x07, 0xaf, 0x77, 0x5f,
	0x1e, 0x1d, 0x1c, 0xcc, 0x24, 0xb5, 0x80, 0x60, 0x81, 0xe3, 0xd4, 0x3b, 0x71, 0x7c, 0xa4, 0x43,
	0x5e, 0x90, 0xe3, 0x80, 0x61, 0x82, 0xb5, 0x8a, 0xa1, 0x98, 0xf9, 0x4e, 0x72, 0x47, 0x6d, 0x28,
	0xc5, 0x4d, 0x8a, 0xeb, 0xb9, 0x26, 0xeb, 0xf9, 0xd9, 0x75, 0xf5, 0x6c, 0x4b, 0x38, 0x2e, 0x66,
	0x91, 0xce, 0xdc, 0xc2, 0x8d, 0x88, 0x87, 0x67, 0x60, 0x79, 0x03, 0xad, 0x1a, 0x6d, 0x44, 0x64,
	0xfa, 0xce, 0xf2, 0x06, 0xf5, 0xbf, 0xb3, 0x00, 0xdf, 0xf3, 0x5e, 0x3c, 0xc7, 0x37, 0xdf, 0xa8,
	0xf9, 0x65, 0xc9, 0xde, 0x7c, 0x59, 0x16, 0x4d, 0xe4, 0xd2, 0x8d, 0x26, 0x72, 0xf9, 0xda, 0x89,
	0xbc, 0xba, 0x88, 0xb9, 0x45, 0x8b, 0xf8, 0xc1, 0x0d, 0xbb, 0xba, 0xa5, 0xf9, 0x45, 0x5b, 0x3a,
	0x1d, 0xfe, 0xc2, 0xc7, 0x0d, 0xff, 0x95, 0xa6, 0xc3, 0xc7, 0x36, 0xbd, 0xfe, 0x1a, 0x56, 0xa7,
	0x2d, 0xf5, 0xd0, 0x3e, 0x14, 0x4f, 0x78, 0xaf, 0x3b, 0xe9, 0x84, 0xa6, 0x18, 0x59, 0x73, 0x75,
	0xa7, 0x7e, 0x5d, 0xe0, 0xa9, 0x6b, 0x67, 0xf5, 0x64, 0x1a, 0x66, 0xf3, 0xdf, 0x0c, 0xdc, 0x4e,
	0x25, 0x8f, 0x3e, 0x85, 0x25, 0xc6, 0x19, 0x51, 0x6f, 0xe9, 0xeb, 0xa3, 0xb1, 0x71, 0x37, 0x25,
	0xbf, 0xe4, 0x8c, 0xa0, 0x0d, 0xc8, 0x32, 0x72, 0xae, 0x2a, 0x7a, 0x75, 0x34, 0x36, 0x50, 0x9a,
	0x20, 0xe7, 0xe8, 0x11, 0xac, 0xb8, 0x84, 0x61, 0xca, 0xfa, 0x6a, 0x46, 0xd7, 0x47, 0x63, 0xa3,
	0x9a, 0x82, 0x0e, 0x23, 0x15, 0x6d, 0xc9, 0x51, 0xb3, 0x89, 0xe7, 0x85, 0x6c, 0x56, 0x7f, 0x30,
	0x1a, 0x1b, 0xf7, 0xd2, 0x6c, 0x02, 0xa0, 0x87, 0xb0, 0x2c, 0x88, 0x85, 0x2f, 0xd4, 0x25, 0x5d,
	0x1b, 0x8d, 0x8d, 0x4a, 0xba, 0xf0, 0xa1, 0x86, 0x1e, 0x43, 0xde, 0xe6, 0x67, 0xae, 0x43, 0x7c,
	0xa2, 0x2e, 0xeb, 0xf7, 0x47, 0x63, 0x63, 0x3d, 0xc5, 0x7d, 0x13, 0xcb, 0xc8, 0x84, 0x15, 0xdb,
	0x62, 0x36, 0x71, 0xb0, 0x9a, 0x5b, 0x4c, 0x4a, 0x95, 0x84, 0x23, 0x93, 0x3b, 0xb6, 0xa8, 0x43,
	0xb0, 0xba, 0xa2, 0xdf, 0x1b, 0x8d, 0x8d, 0xb5, 0x14, 0xf8, 0x42, 0x8a, 0xfa, 0xfa, 0x2f, 0xbf,
	0xd6, 0x6e, 0xfd, 0xfe, 0x5b, 0x2d, 0x5d, 0xd5, 0xcd, 0xff, 0x14, 0x28, 0xce, 0xb6, 0x17, 0x7d,
	0x09, 0x68, 0x6e, 0x36, 0xba, 0x71, 0xd1, 0x2b, 0xa3, 0xb1, 0xa1, 0xce, 0x92, 0xb2, 0xe2, 0x4f,
	0xa0, 0x32, 0x4f, 0x5b, 0xb6, 0x4f, 0x87, 0x64, 0xd2, 0x82, 0x59, 0xbe, 0x25, 0x15, 0xf4, 0x15,
	0x54, 0xe7, 0x3d, 0x28, 0x8b, 0x7d, 0x32, 0x51, 0xed, 0x66, 0x7d, 0xda, 0xb1, 0x16, 0xfe, 0x7b,
	0xe6, 0xbd, 0x88, 0x10, 0x5c, 0xa8, 0x59, 0x7d, 0x6d, 0x34, 0x36, 0xee, 0xcc, 0xba, 0xec, 0x87,
	0x82, 0x5e, 0x89, 0xdf, 0x3b, 0xf7, 0xb6, 0x3d, 0xed, 0xcd, 0x65, 0x4d, 0xf9, 0xeb, 0xb2, 0xa6,
	0xfc, 0x73, 0x59, 0x53, 0xfe, 0x78, 0x57, 0x53, 0xde, 0xbc, 0xab, 0x29, 0x3f, 0x65, 0x86, 0xdb,
	0xbd, 0x9c, 0xfc, 0xe5, 0x3f, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x47, 0xd8, 0xcb, 0x0f, 0x94,
	0x08, 0x00, 0x00,
}
