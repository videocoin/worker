syntax = "proto3";

package cloud.api.miners.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "miners/v1/miner.proto";

option go_package = "v1";
option (gogoproto.marshaler_all) = false;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Videocoin api";
		version: "1.0";
	};
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
		}
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "401";
		value: {
			description: "Returned when the user is not logged in.";
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
			    example: {
                    value: '{ "message": "Not found", "fields": null }'
                }
			}
		}
	}
};

service MinersService {
    rpc Create(google.protobuf.Empty) returns (MinerResponse) {
        option (google.api.http) = {
            post: "/api/v1/miners",
            body: "*"
        };
    }

     rpc All(google.protobuf.Empty) returns (MinerListResponse) {
        option (google.api.http) = {
            get: "/api/v1/miners/all"
        };
    }

    rpc Get(MinerRequest) returns (MinerResponse) {
        option (google.api.http) = {
            get: "/api/v1/miners/{id}"
        };
    }

    rpc Delete(MinerRequest) returns (MinerResponse) {
        option (google.api.http) = {
            delete: "/api/v1/miners/{id}"
        };
    }

    rpc Update(UpdateMinerRequest) returns (MinerResponse) {
        option (google.api.http) = {
            put: "/api/v1/miners/{id}"
            body: "*"
        };
    }

    rpc List(MinerRequest) returns (MinerListResponse) {
        option (google.api.http) = {
            get: "/api/v1/miners"
        };
    }

    rpc SetTags(SetTagsRequest) returns (MinerResponse) {
        option (google.api.http) = {
            put: "/api/v1/miners/{id}/tags"
            body: "*"
        };
    }

    rpc Register(RegistrationRequest) returns (MinerResponse) {}
    rpc GetByID(MinerRequest) returns (MinerResponse) {}
    rpc Ping(PingRequest) returns (PingResponse) {}
    rpc AssignTask(AssignTaskRequest) returns (google.protobuf.Empty) {}
    rpc UnassignTask(AssignTaskRequest) returns (google.protobuf.Empty) {}
    rpc GetForceTaskList(google.protobuf.Empty) returns (ForceTaskListResponse) {}
}

message RegistrationRequest {
    string client_id = 1 [(gogoproto.customname) = "ClientID"];
    string address = 2;
  }

message MinerRequest {
    string id = 1;
}

message UpdateMinerRequest {
    string id = 1;
    string name = 2;
}

message MinerResponse {
    string id = 1;
    string name = 2;
    MinerStatus status = 3;
    map<string, string> tags = 4;
    SystemInfo system_info = 5;
    CryptoInfo crypto_info = 6;
}

message MinerListResponse {
    repeated MinerResponse items = 1;
}

message PingRequest {
    string client_id = 1 [(gogoproto.customname) = "ClientID"];
    bytes system_info = 2;
    bytes crypto_info = 3;
}
  
message PingResponse {}

message AssignTaskRequest {
    string client_id = 1 [(gogoproto.customname) = "ClientID"];
    string task_id = 2 [(gogoproto.customname) = "TaskID"];
}

message Tag {
    string key = 1;
    string value = 2;
}

message SetTagsRequest {
    string id = 1;
    repeated Tag tags = 2;
}

message ForceTaskListResponse {
    repeated string ids = 1;
}
