// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package staking

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingManagerUnbondingRequest is an auto generated low-level Go binding around an user-defined struct.
type StakingManagerUnbondingRequest struct {
	Transcoder common.Address
	Timestamp  *big.Int
	Amount     *big.Int
}

// StakingManagerABI is the input ABI used to generate the binding from.
const StakingManagerABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSelfStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transcoderApprovalPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashRate\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_slashPoolAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"}],\"name\":\"Jailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unbondingID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"}],\"name\":\"TranscoderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unbondingID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"readiness\",\"type\":\"uint256\"}],\"name\":\"UnbondingRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"}],\"name\":\"Unjailed\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegAddr\",\"type\":\"address\"}],\"name\":\"getDelegatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getSelfStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatorAddr\",\"type\":\"address\"}],\"name\":\"getSlashableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"}],\"name\":\"getTrancoderSlashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"}],\"name\":\"getTranscoderState\",\"outputs\":[{\"internalType\":\"enumStakingManager.TranscoderState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unbondingID\",\"type\":\"uint256\"}],\"name\":\"getUnbondingRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"transcoder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structStakingManager.UnbondingRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"}],\"name\":\"isJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSelfStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWithdrawalsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"registerTranscoder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setApprovalPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"setCapacity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSelfMinStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSlashFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"zone\",\"type\":\"uint256\"}],\"name\":\"setZone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"slashRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transcoderApprovalPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transcoders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zone\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"jailed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transcodersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transcodersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unbondingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"transcoderAddr\",\"type\":\"address\"}],\"name\":\"unjail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// StakingManagerBin is the compiled bytecode used for deploying new contracts.
var StakingManagerBin = "0x60806040523480156200001157600080fd5b5060405162003bba38038062003bba833981810160405262000037919081019062000191565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3856001819055508460028190555083600381905550826004819055508160058190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000299565b600081519050620001748162000265565b92915050565b6000815190506200018b816200027f565b92915050565b60008060008060008060c08789031215620001ab57600080fd5b6000620001bb89828a016200017a565b9650506020620001ce89828a016200017a565b9550506040620001e189828a016200017a565b9450506060620001f489828a016200017a565b93505060806200020789828a016200017a565b92505060a06200021a89828a0162000163565b9150509295509295509295565b600062000234826200023b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002708162000227565b81146200027c57600080fd5b50565b6200028a816200025b565b81146200029657600080fd5b50565b61391180620002a96000396000f3fe6080604052600436106101f95760003560e01c80638da5cb5b1161010d578063c96be4cb116100a0578063ec69a1bb1161006f578063ec69a1bb1461073f578063ec810a0a1461077c578063f2fde38b146107b9578063fa760154146107e2578063fece707d1461080d576101f9565b8063c96be4cb14610657578063e2dc17f614610694578063e341181d146106d7578063e71824bc14610702576101f9565b80639e79b122116100dc5780639e79b1221461059b578063a79e7263146105d8578063c57cc20014610601578063c5f530af1461062c576101f9565b80638da5cb5b146104df5780638efc97a11461050a5780638f32d59b1461054757806396fb4a9c14610572576101f9565b80635028e2e1116101905780636cf6d6751161015f5780636cf6d6751461040b5780636db2890914610436578063715018a6146104735780637edbceb11461048a5780638d23fc61146104a1576101f9565b80635028e2e114610372578063503074ef146103af5780635afd2faa146103d85780635c19a95c146103ef576101f9565b80632c9f0f2e116101cc5780632c9f0f2e146102cc5780633939e608146102f5578063399f57c014610320578063449ecfe614610349576101f9565b806302985992146101fe57806314bfb527146102295780631e7ff8f61461026657806326e348ba146102a3575b600080fd5b34801561020a57600080fd5b5061021361084a565b6040516102209190613739565b60405180910390f35b34801561023557600080fd5b50610250600480360361024b91908101906130d2565b610850565b60405161025d9190613588565b60405180910390f35b34801561027257600080fd5b5061028d600480360361028891908101906130d2565b610965565b60405161029a9190613739565b60405180910390f35b3480156102af57600080fd5b506102ca60048036036102c5919081019061319c565b610a20565b005b3480156102d857600080fd5b506102f360048036036102ee919081019061319c565b610a48565b005b34801561030157600080fd5b5061030a610a63565b6040516103179190613739565b60405180910390f35b34801561032c57600080fd5b506103476004803603610342919081019061319c565b610a69565b005b34801561035557600080fd5b50610370600480360361036b91908101906130d2565b610bfb565b005b34801561037e57600080fd5b5061039960048036036103949190810190613124565b610d6a565b6040516103a69190613739565b60405180910390f35b3480156103bb57600080fd5b506103d660048036036103d19190810190613160565b610ef4565b005b3480156103e457600080fd5b506103ed610f9d565b005b610409600480360361040491908101906130d2565b61108d565b005b34801561041757600080fd5b5061042061143d565b60405161042d9190613739565b60405180910390f35b34801561044257600080fd5b5061045d60048036036104589190810190613160565b611443565b60405161046a9190613739565b60405180910390f35b34801561047f57600080fd5b50610488611973565b005b34801561049657600080fd5b5061049f611a43565b005b3480156104ad57600080fd5b506104c860048036036104c391908101906130d2565b611b3f565b6040516104d6929190613754565b60405180910390f35b3480156104eb57600080fd5b506104f4611b63565b604051610501919061356d565b60405180910390f35b34801561051657600080fd5b50610531600480360361052c9190810190613124565b611b8c565b60405161053e9190613739565b60405180910390f35b34801561055357600080fd5b5061055c611d51565b6040516105699190613588565b60405180910390f35b34801561057e57600080fd5b5061059960048036036105949190810190613160565b611da8565b005b3480156105a757600080fd5b506105c260048036036105bd9190810190613160565b611e51565b6040516105cf919061371e565b60405180910390f35b3480156105e457600080fd5b506105ff60048036036105fa91908101906130fb565b611f2f565b005b34801561060d57600080fd5b50610616612015565b6040516106239190613588565b60405180910390f35b34801561063857600080fd5b506106416120bb565b60405161064e9190613739565b60405180910390f35b34801561066357600080fd5b5061067e600480360361067991908101906130d2565b6120c1565b60405161068b9190613588565b60405180910390f35b3480156106a057600080fd5b506106bb60048036036106b691908101906130d2565b612333565b6040516106ce979695949392919061377d565b60405180910390f35b3480156106e357600080fd5b506106ec612382565b6040516106f99190613739565b60405180910390f35b34801561070e57600080fd5b50610729600480360361072491908101906130d2565b612388565b60405161073691906135a3565b60405180910390f35b34801561074b57600080fd5b50610766600480360361076191908101906130d2565b61268d565b6040516107739190613739565b60405180910390f35b34801561078857600080fd5b506107a3600480360361079e919081019061319c565b612798565b6040516107b0919061356d565b60405180910390f35b3480156107c557600080fd5b506107e060048036036107db91908101906130d2565b6127d4565b005b3480156107ee57600080fd5b506107f76127f1565b6040516108049190613739565b60405180910390f35b34801561081957600080fd5b50610834600480360361082f91908101906130d2565b6127fe565b6040516108419190613739565b60405180910390f35b60015481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b89061367e565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101541161094b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109429061361e565b60405180910390fd5b8060080160009054906101000a900460ff16915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd9061367e565b60405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b610a28611d51565b610a3157600080fd5b60008111610a3e57600080fd5b8060028190555050565b610a50611d51565b610a5957600080fd5b8060038190555050565b60035481565b60648110610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa39061365e565b60405180910390fd5b60003390506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015414610b3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b32906135fe565b60405180910390fd5b42816001018190555082816002018190555060098290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167f6fbcf0f12b438f90175bebf725f86a4a74d12525d5d2c144a68e400696bce58b60405160405180910390a2505050565b610c03611d51565b610c0c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c739061367e565b60405180910390fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411610d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfd9061369e565b60405180910390fd5b60008160080160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167ffa5039497ad9ba11f0eb5239b2614e925541bbcc0cf3476dd68e1927c86d33ff60405160405180910390a25050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29061367e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e429061367e565b60405180910390fd5b6000610e578484611b8c565b9050610eeb81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281190919063ffffffff16565b91505092915050565b610efc611d51565b610f0557600080fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f869061361e565b60405180910390fd5b818160050181905550505050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806004015481600301541061102a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611021906136be565b60405180910390fd5b6000816003015490505b816004015481101561108857600061104b82612831565b90508061105a5750505061108b565b61107260018460030154612b8690919063ffffffff16565b8360030181905550508080600101915050611034565b50505b565b600033905060003490506000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561118d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611184906136de565b60405180910390fd5b6001548310156111d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c99061363e565b60405180910390fd5b6000826001015411611219576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112109061361e565b60405180910390fd5b60008160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561131957816007018490806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600601805490508160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6113238585612ba5565b61133a838360000154612b8690919063ffffffff16565b8260000181905550611396838260000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b8690919063ffffffff16565b8160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b60405160405180910390a45050505050565b60045481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab906136de565b60405180910390fd5b60003390506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506115498684612ba5565b8060000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548511156115cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c4906135de565b60405180910390fd5b60006115d887612388565b905061162e868360000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281190919063ffffffff16565b8260000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061168a86846000015461281190919063ffffffff16565b83600001819055506000826004015490506116b360018460040154612b8690919063ffffffff16565b8360040181905550600060038111156116c857fe5b8260038111156116d457fe5b14806116f65750600260038111156116e857fe5b8260038111156116f457fe5b145b15611856578773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16827f9dad13c763cec66db8f825b1cfac1e63b0010e3dcb615d11aa95f160d7c34d7b426040516117599190613739565b60405180910390a460405180606001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001600454420381526020018881525083600201600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505061181281612831565b611851576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611848906135be565b60405180910390fd5b611965565b8773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16827f9dad13c763cec66db8f825b1cfac1e63b0010e3dcb615d11aa95f160d7c34d7b60045442016040516118b89190613739565b60405180910390a460405180606001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018881525083600201600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050505b809550505050505092915050565b61197b611d51565b61198457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060040154816003015410611ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac7906136be565b60405180910390fd5b611add8160030154612831565b611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b13906135be565b60405180910390fd5b611b3460018260030154612b8690919063ffffffff16565b816003018190555050565b60086020528060005260406000206000915090508060030154908060040154905082565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000836006018054905090506000809050818310611c7e578095505050505050611d4b565b60008390505b82811015611d41576000866006018281548110611c9d57fe5b90600052602060002090600202016001015490506000611d07828860000160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d9590919063ffffffff16565b9050611d1d606482612dcf90919063ffffffff16565b9050611d328185612b8690919063ffffffff16565b93505050806001019050611c84565b5080955050505050505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b611db0611d51565b611db957600080fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411611e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3a9061361e565b60405180910390fd5b818160040181905550505050565b611e5961305c565b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152505091505092915050565b611f37611d51565b611f4057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc8906136fe565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816003015490505b81600401548110156120b1576000826002016000838152602001908152602001600020905060045481600101544203106120a357600193505050506120b8565b508080600101915050612063565b5060009150505b90565b60025481565b60006120cb611d51565b6120d457600080fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217e9061367e565b60405180910390fd5b60008160010154116121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c59061369e565b60405180910390fd5b60006121d984612388565b9050600160038111156121e857fe5b8160038111156121f457fe5b14158015612218575060038081111561220957fe5b81600381111561221557fe5b14155b156122285760009250505061232e565b60006122436005548460000154612d9590919063ffffffff16565b9050612259606482612dcf90919063ffffffff16565b905061227281846000015461281190919063ffffffff16565b83600001819055508260060160405180604001604052804281526020016005548152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050506122e085612df5565b6005548573ffffffffffffffffffffffffffffffffffffffff167f4ed05e9673c26d2ed44f7ef6a7f2942df0ee3b5e1e17db4b99f9dcd261a339cd60405160405180910390a3600193505050505b919050565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060080160009054906101000a900460ff16905087565b60055481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f09061367e565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260010154116124c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bd9061361e565b60405180910390fd5b8160080160009054906101000a900460ff16156124e857600292505050612688565b6003548260010154420310612681576002548160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061254c57600192505050612688565b60008090506000826003015490505b826004015481101561261657600083600201600083815260200190815260200160002090508673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146125dd5750612609565b60045481600101544203101561260757612604816002015484612b8690919063ffffffff16565b92505b505b808060010191505061255b565b5060025461266e8360000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612b8690919063ffffffff16565b1061267f5760039350505050612688565b505b6000925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156126fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f59061367e565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411612788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277f9061361e565b60405180910390fd5b8060060180549050915050919050565b600981815481106127a557fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6127dc611d51565b6127e557600080fd5b6127ee81612f64565b50565b6000600980549050905090565b600061280a8283610d6a565b9050919050565b60008282111561282057600080fd5b600082840390508091505092915050565b6000803390506000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600201600086815260200190815260200160002090506000816002015414156128ac5760009350505050612b81565b6004548160010154420310156128c85760009350505050612b81565b6000600760008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082600101549050600061294f60045483612b8690919063ffffffff16565b9050600080905060008090505b8460060180549050811015612a2657600085600601828154811061297c57fe5b90600052602060002090600202019050600081600001549050858110806129a257508481115b156129ae575050612a1b565b60006129cb83600101548a60020154612d9590919063ffffffff16565b90506129e1606482612dcf90919063ffffffff16565b90506129fa818a6002015461281190919063ffffffff16565b8960020181905550612a158186612b8690919063ffffffff16565b94505050505b80600101905061295c565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612a8f573d6000803e3d6000fd5b50600085600201549050600086600201819055508773ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612ae9573d6000803e3d6000fd5b508560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168b7f544ab8c284dc3fe11e91e1be98918875679b41f64ade1d34b53fbfaab5e14f8484604051612b6c9190613739565b60405180910390a46001985050505050505050505b919050565b600080828401905083811015612b9b57600080fd5b8091505092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000826006018054905090506000612c438686611b8c565b9050612c99818460000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461281190919063ffffffff16565b8360000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818360010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612d8c573d6000803e3d6000fd5b50505050505050565b600080831415612da85760009050612dc9565b6000828402905082848281612db957fe5b0414612dc457600080fd5b809150505b92915050565b6000808211612ddd57600080fd5b6000828481612de857fe5b0490508091505092915050565b612dfd611d51565b612e0657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612e76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6d9061367e565b60405180910390fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816001015411612f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef79061369e565b60405180910390fd5b60018160080160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f519ec2af7b403e5bfa116afc87904cd6aa3e97a09cae81b522551191195674e760405160405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f9e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000813590506130a281613889565b92915050565b6000813590506130b7816138a0565b92915050565b6000813590506130cc816138b7565b92915050565b6000602082840312156130e457600080fd5b60006130f284828501613093565b91505092915050565b60006020828403121561310d57600080fd5b600061311b848285016130a8565b91505092915050565b6000806040838503121561313757600080fd5b600061314585828601613093565b925050602061315685828601613093565b9150509250929050565b6000806040838503121561317357600080fd5b600061318185828601613093565b9250506020613192858286016130bd565b9150509250929050565b6000602082840312156131ae57600080fd5b60006131bc848285016130bd565b91505092915050565b6131ce816137fd565b82525050565b6131dd816137fd565b82525050565b6131ec81613821565b82525050565b6131fb8161386a565b82525050565b600061320e6018836137ec565b91507f6661696c656420746f207769746864726177207374616b6500000000000000006000830152602082019050919050565b600061324e6010836137ec565b91507f4e6f7420656e6f7567682066756e6473000000000000000000000000000000006000830152602082019050919050565b600061328e601d836137ec565b91507f5472616e73636f64657220616c726561647920726567697374657265640000006000830152602082019050919050565b60006132ce6019836137ec565b91507f5472616e73636f646572206e6f742072656769737465726564000000000000006000830152602082019050919050565b600061330e6023836137ec565b91507f4d757374206465706f736974206174206c65617374206d696e696d756d20766160008301527f6c756500000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613374602b836137ec565b91507f52617465206d75737420626520612070657263656e746167652062657477656560008301527f6e203020616e64203130300000000000000000000000000000000000000000006020830152604082019050919050565b60006133da6016836137ec565b91507f63616e277420757365207a65726f2061646472657373000000000000000000006000830152602082019050919050565b600061341a601a836137ec565b91507f52656769737465726564207472616e73636f646572206f6e6c790000000000006000830152602082019050919050565b600061345a6013836137ec565b91507f6e6f2070656e64696e67207265717565737473000000000000000000000000006000830152602082019050919050565b600061349a6015836137ec565b91507f43616e60742075736520616464726573732030783000000000000000000000006000830152602082019050919050565b60006134da601b836137ec565b91507f416c72656164792073657420746f2074686973206164647265737300000000006000830152602082019050919050565b60608201600082015161352360008501826131c5565b506020820151613536602085018261354f565b506040820151613549604085018261354f565b50505050565b61355881613860565b82525050565b61356781613860565b82525050565b600060208201905061358260008301846131d4565b92915050565b600060208201905061359d60008301846131e3565b92915050565b60006020820190506135b860008301846131f2565b92915050565b600060208201905081810360008301526135d781613201565b9050919050565b600060208201905081810360008301526135f781613241565b9050919050565b6000602082019050818103600083015261361781613281565b9050919050565b60006020820190508181036000830152613637816132c1565b9050919050565b6000602082019050818103600083015261365781613301565b9050919050565b6000602082019050818103600083015261367781613367565b9050919050565b60006020820190508181036000830152613697816133cd565b9050919050565b600060208201905081810360008301526136b78161340d565b9050919050565b600060208201905081810360008301526136d78161344d565b9050919050565b600060208201905081810360008301526136f78161348d565b9050919050565b60006020820190508181036000830152613717816134cd565b9050919050565b6000606082019050613733600083018461350d565b92915050565b600060208201905061374e600083018461355e565b92915050565b6000604082019050613769600083018561355e565b613776602083018461355e565b9392505050565b600060e082019050613792600083018a61355e565b61379f602083018961355e565b6137ac604083018861355e565b6137b9606083018761355e565b6137c6608083018661355e565b6137d360a083018561355e565b6137e060c08301846131e3565b98975050505050505050565b600082825260208201905092915050565b600061380882613840565b9050919050565b600061381a82613840565b9050919050565b60008115159050919050565b600081905061383b8261387c565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006138758261382d565b9050919050565b6004811061388657fe5b50565b613892816137fd565b811461389d57600080fd5b50565b6138a98161380f565b81146138b457600080fd5b50565b6138c081613860565b81146138cb57600080fd5b5056fea365627a7a72315820175fccd99e785264683b88099e092adac18d25ef7e706a3ed3dea07c0f30a5f26c6578706572696d656e74616cf564736f6c63430005100040"

// DeployStakingManager deploys a new Ethereum contract, binding an instance of StakingManager to it.
func DeployStakingManager(auth *bind.TransactOpts, backend bind.ContractBackend, _minDelegation *big.Int, _minSelfStake *big.Int, _transcoderApprovalPeriod *big.Int, _unbondingPeriod *big.Int, _slashRate *big.Int, _slashPoolAddress common.Address) (common.Address, *types.Transaction, *StakingManager, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StakingManagerBin), backend, _minDelegation, _minSelfStake, _transcoderApprovalPeriod, _unbondingPeriod, _slashRate, _slashPoolAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakingManager{StakingManagerCaller: StakingManagerCaller{contract: contract}, StakingManagerTransactor: StakingManagerTransactor{contract: contract}, StakingManagerFilterer: StakingManagerFilterer{contract: contract}}, nil
}

// StakingManager is an auto generated Go binding around an Ethereum contract.
type StakingManager struct {
	StakingManagerCaller     // Read-only binding to the contract
	StakingManagerTransactor // Write-only binding to the contract
	StakingManagerFilterer   // Log filterer for contract events
}

// StakingManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingManagerSession struct {
	Contract     *StakingManager   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingManagerCallerSession struct {
	Contract *StakingManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StakingManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingManagerTransactorSession struct {
	Contract     *StakingManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StakingManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingManagerRaw struct {
	Contract *StakingManager // Generic contract binding to access the raw methods on
}

// StakingManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingManagerCallerRaw struct {
	Contract *StakingManagerCaller // Generic read-only contract binding to access the raw methods on
}

// StakingManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingManagerTransactorRaw struct {
	Contract *StakingManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakingManager creates a new instance of StakingManager, bound to a specific deployed contract.
func NewStakingManager(address common.Address, backend bind.ContractBackend) (*StakingManager, error) {
	contract, err := bindStakingManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakingManager{StakingManagerCaller: StakingManagerCaller{contract: contract}, StakingManagerTransactor: StakingManagerTransactor{contract: contract}, StakingManagerFilterer: StakingManagerFilterer{contract: contract}}, nil
}

// NewStakingManagerCaller creates a new read-only instance of StakingManager, bound to a specific deployed contract.
func NewStakingManagerCaller(address common.Address, caller bind.ContractCaller) (*StakingManagerCaller, error) {
	contract, err := bindStakingManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingManagerCaller{contract: contract}, nil
}

// NewStakingManagerTransactor creates a new write-only instance of StakingManager, bound to a specific deployed contract.
func NewStakingManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingManagerTransactor, error) {
	contract, err := bindStakingManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingManagerTransactor{contract: contract}, nil
}

// NewStakingManagerFilterer creates a new log filterer instance of StakingManager, bound to a specific deployed contract.
func NewStakingManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingManagerFilterer, error) {
	contract, err := bindStakingManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingManagerFilterer{contract: contract}, nil
}

// bindStakingManager binds a generic wrapper to an already deployed contract.
func bindStakingManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingManager *StakingManagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StakingManager.Contract.StakingManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingManager *StakingManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingManager.Contract.StakingManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingManager *StakingManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingManager.Contract.StakingManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakingManager *StakingManagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StakingManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakingManager *StakingManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakingManager *StakingManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakingManager.Contract.contract.Transact(opts, method, params...)
}

// Delegators is a free data retrieval call binding the contract method 0x8d23fc61.
//
// Solidity: function delegators(address ) constant returns(uint256 pending, uint256 next)
func (_StakingManager *StakingManagerCaller) Delegators(opts *bind.CallOpts, arg0 common.Address) (struct {
	Pending *big.Int
	Next    *big.Int
}, error) {
	ret := new(struct {
		Pending *big.Int
		Next    *big.Int
	})
	out := ret
	err := _StakingManager.contract.Call(opts, out, "delegators", arg0)
	return *ret, err
}

// Delegators is a free data retrieval call binding the contract method 0x8d23fc61.
//
// Solidity: function delegators(address ) constant returns(uint256 pending, uint256 next)
func (_StakingManager *StakingManagerSession) Delegators(arg0 common.Address) (struct {
	Pending *big.Int
	Next    *big.Int
}, error) {
	return _StakingManager.Contract.Delegators(&_StakingManager.CallOpts, arg0)
}

// Delegators is a free data retrieval call binding the contract method 0x8d23fc61.
//
// Solidity: function delegators(address ) constant returns(uint256 pending, uint256 next)
func (_StakingManager *StakingManagerCallerSession) Delegators(arg0 common.Address) (struct {
	Pending *big.Int
	Next    *big.Int
}, error) {
	return _StakingManager.Contract.Delegators(&_StakingManager.CallOpts, arg0)
}

// GetDelegatorStake is a free data retrieval call binding the contract method 0x5028e2e1.
//
// Solidity: function getDelegatorStake(address transcoderAddr, address delegAddr) constant returns(uint256)
func (_StakingManager *StakingManagerCaller) GetDelegatorStake(opts *bind.CallOpts, transcoderAddr common.Address, delegAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getDelegatorStake", transcoderAddr, delegAddr)
	return *ret0, err
}

// GetDelegatorStake is a free data retrieval call binding the contract method 0x5028e2e1.
//
// Solidity: function getDelegatorStake(address transcoderAddr, address delegAddr) constant returns(uint256)
func (_StakingManager *StakingManagerSession) GetDelegatorStake(transcoderAddr common.Address, delegAddr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetDelegatorStake(&_StakingManager.CallOpts, transcoderAddr, delegAddr)
}

// GetDelegatorStake is a free data retrieval call binding the contract method 0x5028e2e1.
//
// Solidity: function getDelegatorStake(address transcoderAddr, address delegAddr) constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) GetDelegatorStake(transcoderAddr common.Address, delegAddr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetDelegatorStake(&_StakingManager.CallOpts, transcoderAddr, delegAddr)
}

// GetSelfStake is a free data retrieval call binding the contract method 0xfece707d.
//
// Solidity: function getSelfStake(address _addr) constant returns(uint256)
func (_StakingManager *StakingManagerCaller) GetSelfStake(opts *bind.CallOpts, _addr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getSelfStake", _addr)
	return *ret0, err
}

// GetSelfStake is a free data retrieval call binding the contract method 0xfece707d.
//
// Solidity: function getSelfStake(address _addr) constant returns(uint256)
func (_StakingManager *StakingManagerSession) GetSelfStake(_addr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetSelfStake(&_StakingManager.CallOpts, _addr)
}

// GetSelfStake is a free data retrieval call binding the contract method 0xfece707d.
//
// Solidity: function getSelfStake(address _addr) constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) GetSelfStake(_addr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetSelfStake(&_StakingManager.CallOpts, _addr)
}

// GetSlashableAmount is a free data retrieval call binding the contract method 0x8efc97a1.
//
// Solidity: function getSlashableAmount(address transcoderAddr, address delegatorAddr) constant returns(uint256)
func (_StakingManager *StakingManagerCaller) GetSlashableAmount(opts *bind.CallOpts, transcoderAddr common.Address, delegatorAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getSlashableAmount", transcoderAddr, delegatorAddr)
	return *ret0, err
}

// GetSlashableAmount is a free data retrieval call binding the contract method 0x8efc97a1.
//
// Solidity: function getSlashableAmount(address transcoderAddr, address delegatorAddr) constant returns(uint256)
func (_StakingManager *StakingManagerSession) GetSlashableAmount(transcoderAddr common.Address, delegatorAddr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetSlashableAmount(&_StakingManager.CallOpts, transcoderAddr, delegatorAddr)
}

// GetSlashableAmount is a free data retrieval call binding the contract method 0x8efc97a1.
//
// Solidity: function getSlashableAmount(address transcoderAddr, address delegatorAddr) constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) GetSlashableAmount(transcoderAddr common.Address, delegatorAddr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetSlashableAmount(&_StakingManager.CallOpts, transcoderAddr, delegatorAddr)
}

// GetTotalStake is a free data retrieval call binding the contract method 0x1e7ff8f6.
//
// Solidity: function getTotalStake(address _addr) constant returns(uint256)
func (_StakingManager *StakingManagerCaller) GetTotalStake(opts *bind.CallOpts, _addr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getTotalStake", _addr)
	return *ret0, err
}

// GetTotalStake is a free data retrieval call binding the contract method 0x1e7ff8f6.
//
// Solidity: function getTotalStake(address _addr) constant returns(uint256)
func (_StakingManager *StakingManagerSession) GetTotalStake(_addr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetTotalStake(&_StakingManager.CallOpts, _addr)
}

// GetTotalStake is a free data retrieval call binding the contract method 0x1e7ff8f6.
//
// Solidity: function getTotalStake(address _addr) constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) GetTotalStake(_addr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetTotalStake(&_StakingManager.CallOpts, _addr)
}

// GetTrancoderSlashes is a free data retrieval call binding the contract method 0xec69a1bb.
//
// Solidity: function getTrancoderSlashes(address transcoderAddr) constant returns(uint256)
func (_StakingManager *StakingManagerCaller) GetTrancoderSlashes(opts *bind.CallOpts, transcoderAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getTrancoderSlashes", transcoderAddr)
	return *ret0, err
}

// GetTrancoderSlashes is a free data retrieval call binding the contract method 0xec69a1bb.
//
// Solidity: function getTrancoderSlashes(address transcoderAddr) constant returns(uint256)
func (_StakingManager *StakingManagerSession) GetTrancoderSlashes(transcoderAddr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetTrancoderSlashes(&_StakingManager.CallOpts, transcoderAddr)
}

// GetTrancoderSlashes is a free data retrieval call binding the contract method 0xec69a1bb.
//
// Solidity: function getTrancoderSlashes(address transcoderAddr) constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) GetTrancoderSlashes(transcoderAddr common.Address) (*big.Int, error) {
	return _StakingManager.Contract.GetTrancoderSlashes(&_StakingManager.CallOpts, transcoderAddr)
}

// GetTranscoderState is a free data retrieval call binding the contract method 0xe71824bc.
//
// Solidity: function getTranscoderState(address transcoderAddr) constant returns(uint8)
func (_StakingManager *StakingManagerCaller) GetTranscoderState(opts *bind.CallOpts, transcoderAddr common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getTranscoderState", transcoderAddr)
	return *ret0, err
}

// GetTranscoderState is a free data retrieval call binding the contract method 0xe71824bc.
//
// Solidity: function getTranscoderState(address transcoderAddr) constant returns(uint8)
func (_StakingManager *StakingManagerSession) GetTranscoderState(transcoderAddr common.Address) (uint8, error) {
	return _StakingManager.Contract.GetTranscoderState(&_StakingManager.CallOpts, transcoderAddr)
}

// GetTranscoderState is a free data retrieval call binding the contract method 0xe71824bc.
//
// Solidity: function getTranscoderState(address transcoderAddr) constant returns(uint8)
func (_StakingManager *StakingManagerCallerSession) GetTranscoderState(transcoderAddr common.Address) (uint8, error) {
	return _StakingManager.Contract.GetTranscoderState(&_StakingManager.CallOpts, transcoderAddr)
}

// GetUnbondingRequest is a free data retrieval call binding the contract method 0x9e79b122.
//
// Solidity: function getUnbondingRequest(address delegatorAddr, uint256 unbondingID) constant returns(StakingManagerUnbondingRequest)
func (_StakingManager *StakingManagerCaller) GetUnbondingRequest(opts *bind.CallOpts, delegatorAddr common.Address, unbondingID *big.Int) (StakingManagerUnbondingRequest, error) {
	var (
		ret0 = new(StakingManagerUnbondingRequest)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "getUnbondingRequest", delegatorAddr, unbondingID)
	return *ret0, err
}

// GetUnbondingRequest is a free data retrieval call binding the contract method 0x9e79b122.
//
// Solidity: function getUnbondingRequest(address delegatorAddr, uint256 unbondingID) constant returns(StakingManagerUnbondingRequest)
func (_StakingManager *StakingManagerSession) GetUnbondingRequest(delegatorAddr common.Address, unbondingID *big.Int) (StakingManagerUnbondingRequest, error) {
	return _StakingManager.Contract.GetUnbondingRequest(&_StakingManager.CallOpts, delegatorAddr, unbondingID)
}

// GetUnbondingRequest is a free data retrieval call binding the contract method 0x9e79b122.
//
// Solidity: function getUnbondingRequest(address delegatorAddr, uint256 unbondingID) constant returns(StakingManagerUnbondingRequest)
func (_StakingManager *StakingManagerCallerSession) GetUnbondingRequest(delegatorAddr common.Address, unbondingID *big.Int) (StakingManagerUnbondingRequest, error) {
	return _StakingManager.Contract.GetUnbondingRequest(&_StakingManager.CallOpts, delegatorAddr, unbondingID)
}

// IsJailed is a free data retrieval call binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address transcoderAddr) constant returns(bool)
func (_StakingManager *StakingManagerCaller) IsJailed(opts *bind.CallOpts, transcoderAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "isJailed", transcoderAddr)
	return *ret0, err
}

// IsJailed is a free data retrieval call binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address transcoderAddr) constant returns(bool)
func (_StakingManager *StakingManagerSession) IsJailed(transcoderAddr common.Address) (bool, error) {
	return _StakingManager.Contract.IsJailed(&_StakingManager.CallOpts, transcoderAddr)
}

// IsJailed is a free data retrieval call binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address transcoderAddr) constant returns(bool)
func (_StakingManager *StakingManagerCallerSession) IsJailed(transcoderAddr common.Address) (bool, error) {
	return _StakingManager.Contract.IsJailed(&_StakingManager.CallOpts, transcoderAddr)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_StakingManager *StakingManagerCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_StakingManager *StakingManagerSession) IsOwner() (bool, error) {
	return _StakingManager.Contract.IsOwner(&_StakingManager.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_StakingManager *StakingManagerCallerSession) IsOwner() (bool, error) {
	return _StakingManager.Contract.IsOwner(&_StakingManager.CallOpts)
}

// MinDelegation is a free data retrieval call binding the contract method 0x02985992.
//
// Solidity: function minDelegation() constant returns(uint256)
func (_StakingManager *StakingManagerCaller) MinDelegation(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "minDelegation")
	return *ret0, err
}

// MinDelegation is a free data retrieval call binding the contract method 0x02985992.
//
// Solidity: function minDelegation() constant returns(uint256)
func (_StakingManager *StakingManagerSession) MinDelegation() (*big.Int, error) {
	return _StakingManager.Contract.MinDelegation(&_StakingManager.CallOpts)
}

// MinDelegation is a free data retrieval call binding the contract method 0x02985992.
//
// Solidity: function minDelegation() constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) MinDelegation() (*big.Int, error) {
	return _StakingManager.Contract.MinDelegation(&_StakingManager.CallOpts)
}

// MinSelfStake is a free data retrieval call binding the contract method 0xc5f530af.
//
// Solidity: function minSelfStake() constant returns(uint256)
func (_StakingManager *StakingManagerCaller) MinSelfStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "minSelfStake")
	return *ret0, err
}

// MinSelfStake is a free data retrieval call binding the contract method 0xc5f530af.
//
// Solidity: function minSelfStake() constant returns(uint256)
func (_StakingManager *StakingManagerSession) MinSelfStake() (*big.Int, error) {
	return _StakingManager.Contract.MinSelfStake(&_StakingManager.CallOpts)
}

// MinSelfStake is a free data retrieval call binding the contract method 0xc5f530af.
//
// Solidity: function minSelfStake() constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) MinSelfStake() (*big.Int, error) {
	return _StakingManager.Contract.MinSelfStake(&_StakingManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_StakingManager *StakingManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_StakingManager *StakingManagerSession) Owner() (common.Address, error) {
	return _StakingManager.Contract.Owner(&_StakingManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_StakingManager *StakingManagerCallerSession) Owner() (common.Address, error) {
	return _StakingManager.Contract.Owner(&_StakingManager.CallOpts)
}

// PendingWithdrawalsExist is a free data retrieval call binding the contract method 0xc57cc200.
//
// Solidity: function pendingWithdrawalsExist() constant returns(bool)
func (_StakingManager *StakingManagerCaller) PendingWithdrawalsExist(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "pendingWithdrawalsExist")
	return *ret0, err
}

// PendingWithdrawalsExist is a free data retrieval call binding the contract method 0xc57cc200.
//
// Solidity: function pendingWithdrawalsExist() constant returns(bool)
func (_StakingManager *StakingManagerSession) PendingWithdrawalsExist() (bool, error) {
	return _StakingManager.Contract.PendingWithdrawalsExist(&_StakingManager.CallOpts)
}

// PendingWithdrawalsExist is a free data retrieval call binding the contract method 0xc57cc200.
//
// Solidity: function pendingWithdrawalsExist() constant returns(bool)
func (_StakingManager *StakingManagerCallerSession) PendingWithdrawalsExist() (bool, error) {
	return _StakingManager.Contract.PendingWithdrawalsExist(&_StakingManager.CallOpts)
}

// SlashRate is a free data retrieval call binding the contract method 0xe341181d.
//
// Solidity: function slashRate() constant returns(uint256)
func (_StakingManager *StakingManagerCaller) SlashRate(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "slashRate")
	return *ret0, err
}

// SlashRate is a free data retrieval call binding the contract method 0xe341181d.
//
// Solidity: function slashRate() constant returns(uint256)
func (_StakingManager *StakingManagerSession) SlashRate() (*big.Int, error) {
	return _StakingManager.Contract.SlashRate(&_StakingManager.CallOpts)
}

// SlashRate is a free data retrieval call binding the contract method 0xe341181d.
//
// Solidity: function slashRate() constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) SlashRate() (*big.Int, error) {
	return _StakingManager.Contract.SlashRate(&_StakingManager.CallOpts)
}

// TranscoderApprovalPeriod is a free data retrieval call binding the contract method 0x3939e608.
//
// Solidity: function transcoderApprovalPeriod() constant returns(uint256)
func (_StakingManager *StakingManagerCaller) TranscoderApprovalPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "transcoderApprovalPeriod")
	return *ret0, err
}

// TranscoderApprovalPeriod is a free data retrieval call binding the contract method 0x3939e608.
//
// Solidity: function transcoderApprovalPeriod() constant returns(uint256)
func (_StakingManager *StakingManagerSession) TranscoderApprovalPeriod() (*big.Int, error) {
	return _StakingManager.Contract.TranscoderApprovalPeriod(&_StakingManager.CallOpts)
}

// TranscoderApprovalPeriod is a free data retrieval call binding the contract method 0x3939e608.
//
// Solidity: function transcoderApprovalPeriod() constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) TranscoderApprovalPeriod() (*big.Int, error) {
	return _StakingManager.Contract.TranscoderApprovalPeriod(&_StakingManager.CallOpts)
}

// Transcoders is a free data retrieval call binding the contract method 0xe2dc17f6.
//
// Solidity: function transcoders(address ) constant returns(uint256 total, uint256 timestamp, uint256 rewardRate, uint256 rewards, uint256 zone, uint256 capacity, bool jailed)
func (_StakingManager *StakingManagerCaller) Transcoders(opts *bind.CallOpts, arg0 common.Address) (struct {
	Total      *big.Int
	Timestamp  *big.Int
	RewardRate *big.Int
	Rewards    *big.Int
	Zone       *big.Int
	Capacity   *big.Int
	Jailed     bool
}, error) {
	ret := new(struct {
		Total      *big.Int
		Timestamp  *big.Int
		RewardRate *big.Int
		Rewards    *big.Int
		Zone       *big.Int
		Capacity   *big.Int
		Jailed     bool
	})
	out := ret
	err := _StakingManager.contract.Call(opts, out, "transcoders", arg0)
	return *ret, err
}

// Transcoders is a free data retrieval call binding the contract method 0xe2dc17f6.
//
// Solidity: function transcoders(address ) constant returns(uint256 total, uint256 timestamp, uint256 rewardRate, uint256 rewards, uint256 zone, uint256 capacity, bool jailed)
func (_StakingManager *StakingManagerSession) Transcoders(arg0 common.Address) (struct {
	Total      *big.Int
	Timestamp  *big.Int
	RewardRate *big.Int
	Rewards    *big.Int
	Zone       *big.Int
	Capacity   *big.Int
	Jailed     bool
}, error) {
	return _StakingManager.Contract.Transcoders(&_StakingManager.CallOpts, arg0)
}

// Transcoders is a free data retrieval call binding the contract method 0xe2dc17f6.
//
// Solidity: function transcoders(address ) constant returns(uint256 total, uint256 timestamp, uint256 rewardRate, uint256 rewards, uint256 zone, uint256 capacity, bool jailed)
func (_StakingManager *StakingManagerCallerSession) Transcoders(arg0 common.Address) (struct {
	Total      *big.Int
	Timestamp  *big.Int
	RewardRate *big.Int
	Rewards    *big.Int
	Zone       *big.Int
	Capacity   *big.Int
	Jailed     bool
}, error) {
	return _StakingManager.Contract.Transcoders(&_StakingManager.CallOpts, arg0)
}

// TranscodersArray is a free data retrieval call binding the contract method 0xec810a0a.
//
// Solidity: function transcodersArray(uint256 ) constant returns(address)
func (_StakingManager *StakingManagerCaller) TranscodersArray(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "transcodersArray", arg0)
	return *ret0, err
}

// TranscodersArray is a free data retrieval call binding the contract method 0xec810a0a.
//
// Solidity: function transcodersArray(uint256 ) constant returns(address)
func (_StakingManager *StakingManagerSession) TranscodersArray(arg0 *big.Int) (common.Address, error) {
	return _StakingManager.Contract.TranscodersArray(&_StakingManager.CallOpts, arg0)
}

// TranscodersArray is a free data retrieval call binding the contract method 0xec810a0a.
//
// Solidity: function transcodersArray(uint256 ) constant returns(address)
func (_StakingManager *StakingManagerCallerSession) TranscodersArray(arg0 *big.Int) (common.Address, error) {
	return _StakingManager.Contract.TranscodersArray(&_StakingManager.CallOpts, arg0)
}

// TranscodersCount is a free data retrieval call binding the contract method 0xfa760154.
//
// Solidity: function transcodersCount() constant returns(uint256)
func (_StakingManager *StakingManagerCaller) TranscodersCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "transcodersCount")
	return *ret0, err
}

// TranscodersCount is a free data retrieval call binding the contract method 0xfa760154.
//
// Solidity: function transcodersCount() constant returns(uint256)
func (_StakingManager *StakingManagerSession) TranscodersCount() (*big.Int, error) {
	return _StakingManager.Contract.TranscodersCount(&_StakingManager.CallOpts)
}

// TranscodersCount is a free data retrieval call binding the contract method 0xfa760154.
//
// Solidity: function transcodersCount() constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) TranscodersCount() (*big.Int, error) {
	return _StakingManager.Contract.TranscodersCount(&_StakingManager.CallOpts)
}

// UnbondingPeriod is a free data retrieval call binding the contract method 0x6cf6d675.
//
// Solidity: function unbondingPeriod() constant returns(uint256)
func (_StakingManager *StakingManagerCaller) UnbondingPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _StakingManager.contract.Call(opts, out, "unbondingPeriod")
	return *ret0, err
}

// UnbondingPeriod is a free data retrieval call binding the contract method 0x6cf6d675.
//
// Solidity: function unbondingPeriod() constant returns(uint256)
func (_StakingManager *StakingManagerSession) UnbondingPeriod() (*big.Int, error) {
	return _StakingManager.Contract.UnbondingPeriod(&_StakingManager.CallOpts)
}

// UnbondingPeriod is a free data retrieval call binding the contract method 0x6cf6d675.
//
// Solidity: function unbondingPeriod() constant returns(uint256)
func (_StakingManager *StakingManagerCallerSession) UnbondingPeriod() (*big.Int, error) {
	return _StakingManager.Contract.UnbondingPeriod(&_StakingManager.CallOpts)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address transcoderAddr) returns()
func (_StakingManager *StakingManagerTransactor) Delegate(opts *bind.TransactOpts, transcoderAddr common.Address) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "delegate", transcoderAddr)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address transcoderAddr) returns()
func (_StakingManager *StakingManagerSession) Delegate(transcoderAddr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.Delegate(&_StakingManager.TransactOpts, transcoderAddr)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address transcoderAddr) returns()
func (_StakingManager *StakingManagerTransactorSession) Delegate(transcoderAddr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.Delegate(&_StakingManager.TransactOpts, transcoderAddr)
}

// RegisterTranscoder is a paid mutator transaction binding the contract method 0x399f57c0.
//
// Solidity: function registerTranscoder(uint256 rate) returns()
func (_StakingManager *StakingManagerTransactor) RegisterTranscoder(opts *bind.TransactOpts, rate *big.Int) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "registerTranscoder", rate)
}

// RegisterTranscoder is a paid mutator transaction binding the contract method 0x399f57c0.
//
// Solidity: function registerTranscoder(uint256 rate) returns()
func (_StakingManager *StakingManagerSession) RegisterTranscoder(rate *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.RegisterTranscoder(&_StakingManager.TransactOpts, rate)
}

// RegisterTranscoder is a paid mutator transaction binding the contract method 0x399f57c0.
//
// Solidity: function registerTranscoder(uint256 rate) returns()
func (_StakingManager *StakingManagerTransactorSession) RegisterTranscoder(rate *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.RegisterTranscoder(&_StakingManager.TransactOpts, rate)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingManager *StakingManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingManager *StakingManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingManager.Contract.RenounceOwnership(&_StakingManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StakingManager *StakingManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StakingManager.Contract.RenounceOwnership(&_StakingManager.TransactOpts)
}

// RequestUnbonding is a paid mutator transaction binding the contract method 0x6db28909.
//
// Solidity: function requestUnbonding(address transcoderAddr, uint256 amount) returns(uint256)
func (_StakingManager *StakingManagerTransactor) RequestUnbonding(opts *bind.TransactOpts, transcoderAddr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "requestUnbonding", transcoderAddr, amount)
}

// RequestUnbonding is a paid mutator transaction binding the contract method 0x6db28909.
//
// Solidity: function requestUnbonding(address transcoderAddr, uint256 amount) returns(uint256)
func (_StakingManager *StakingManagerSession) RequestUnbonding(transcoderAddr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.RequestUnbonding(&_StakingManager.TransactOpts, transcoderAddr, amount)
}

// RequestUnbonding is a paid mutator transaction binding the contract method 0x6db28909.
//
// Solidity: function requestUnbonding(address transcoderAddr, uint256 amount) returns(uint256)
func (_StakingManager *StakingManagerTransactorSession) RequestUnbonding(transcoderAddr common.Address, amount *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.RequestUnbonding(&_StakingManager.TransactOpts, transcoderAddr, amount)
}

// SetApprovalPeriod is a paid mutator transaction binding the contract method 0x2c9f0f2e.
//
// Solidity: function setApprovalPeriod(uint256 period) returns()
func (_StakingManager *StakingManagerTransactor) SetApprovalPeriod(opts *bind.TransactOpts, period *big.Int) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "setApprovalPeriod", period)
}

// SetApprovalPeriod is a paid mutator transaction binding the contract method 0x2c9f0f2e.
//
// Solidity: function setApprovalPeriod(uint256 period) returns()
func (_StakingManager *StakingManagerSession) SetApprovalPeriod(period *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetApprovalPeriod(&_StakingManager.TransactOpts, period)
}

// SetApprovalPeriod is a paid mutator transaction binding the contract method 0x2c9f0f2e.
//
// Solidity: function setApprovalPeriod(uint256 period) returns()
func (_StakingManager *StakingManagerTransactorSession) SetApprovalPeriod(period *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetApprovalPeriod(&_StakingManager.TransactOpts, period)
}

// SetCapacity is a paid mutator transaction binding the contract method 0x503074ef.
//
// Solidity: function setCapacity(address addr, uint256 capacity) returns()
func (_StakingManager *StakingManagerTransactor) SetCapacity(opts *bind.TransactOpts, addr common.Address, capacity *big.Int) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "setCapacity", addr, capacity)
}

// SetCapacity is a paid mutator transaction binding the contract method 0x503074ef.
//
// Solidity: function setCapacity(address addr, uint256 capacity) returns()
func (_StakingManager *StakingManagerSession) SetCapacity(addr common.Address, capacity *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetCapacity(&_StakingManager.TransactOpts, addr, capacity)
}

// SetCapacity is a paid mutator transaction binding the contract method 0x503074ef.
//
// Solidity: function setCapacity(address addr, uint256 capacity) returns()
func (_StakingManager *StakingManagerTransactorSession) SetCapacity(addr common.Address, capacity *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetCapacity(&_StakingManager.TransactOpts, addr, capacity)
}

// SetSelfMinStake is a paid mutator transaction binding the contract method 0x26e348ba.
//
// Solidity: function setSelfMinStake(uint256 amount) returns()
func (_StakingManager *StakingManagerTransactor) SetSelfMinStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "setSelfMinStake", amount)
}

// SetSelfMinStake is a paid mutator transaction binding the contract method 0x26e348ba.
//
// Solidity: function setSelfMinStake(uint256 amount) returns()
func (_StakingManager *StakingManagerSession) SetSelfMinStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetSelfMinStake(&_StakingManager.TransactOpts, amount)
}

// SetSelfMinStake is a paid mutator transaction binding the contract method 0x26e348ba.
//
// Solidity: function setSelfMinStake(uint256 amount) returns()
func (_StakingManager *StakingManagerTransactorSession) SetSelfMinStake(amount *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetSelfMinStake(&_StakingManager.TransactOpts, amount)
}

// SetSlashFundAddress is a paid mutator transaction binding the contract method 0xa79e7263.
//
// Solidity: function setSlashFundAddress(address addr) returns()
func (_StakingManager *StakingManagerTransactor) SetSlashFundAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "setSlashFundAddress", addr)
}

// SetSlashFundAddress is a paid mutator transaction binding the contract method 0xa79e7263.
//
// Solidity: function setSlashFundAddress(address addr) returns()
func (_StakingManager *StakingManagerSession) SetSlashFundAddress(addr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.SetSlashFundAddress(&_StakingManager.TransactOpts, addr)
}

// SetSlashFundAddress is a paid mutator transaction binding the contract method 0xa79e7263.
//
// Solidity: function setSlashFundAddress(address addr) returns()
func (_StakingManager *StakingManagerTransactorSession) SetSlashFundAddress(addr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.SetSlashFundAddress(&_StakingManager.TransactOpts, addr)
}

// SetZone is a paid mutator transaction binding the contract method 0x96fb4a9c.
//
// Solidity: function setZone(address addr, uint256 zone) returns()
func (_StakingManager *StakingManagerTransactor) SetZone(opts *bind.TransactOpts, addr common.Address, zone *big.Int) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "setZone", addr, zone)
}

// SetZone is a paid mutator transaction binding the contract method 0x96fb4a9c.
//
// Solidity: function setZone(address addr, uint256 zone) returns()
func (_StakingManager *StakingManagerSession) SetZone(addr common.Address, zone *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetZone(&_StakingManager.TransactOpts, addr, zone)
}

// SetZone is a paid mutator transaction binding the contract method 0x96fb4a9c.
//
// Solidity: function setZone(address addr, uint256 zone) returns()
func (_StakingManager *StakingManagerTransactorSession) SetZone(addr common.Address, zone *big.Int) (*types.Transaction, error) {
	return _StakingManager.Contract.SetZone(&_StakingManager.TransactOpts, addr, zone)
}

// Slash is a paid mutator transaction binding the contract method 0xc96be4cb.
//
// Solidity: function slash(address addr) returns(bool)
func (_StakingManager *StakingManagerTransactor) Slash(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "slash", addr)
}

// Slash is a paid mutator transaction binding the contract method 0xc96be4cb.
//
// Solidity: function slash(address addr) returns(bool)
func (_StakingManager *StakingManagerSession) Slash(addr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.Slash(&_StakingManager.TransactOpts, addr)
}

// Slash is a paid mutator transaction binding the contract method 0xc96be4cb.
//
// Solidity: function slash(address addr) returns(bool)
func (_StakingManager *StakingManagerTransactorSession) Slash(addr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.Slash(&_StakingManager.TransactOpts, addr)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingManager *StakingManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingManager *StakingManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.TransferOwnership(&_StakingManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StakingManager *StakingManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.TransferOwnership(&_StakingManager.TransactOpts, newOwner)
}

// Unjail is a paid mutator transaction binding the contract method 0x449ecfe6.
//
// Solidity: function unjail(address transcoderAddr) returns()
func (_StakingManager *StakingManagerTransactor) Unjail(opts *bind.TransactOpts, transcoderAddr common.Address) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "unjail", transcoderAddr)
}

// Unjail is a paid mutator transaction binding the contract method 0x449ecfe6.
//
// Solidity: function unjail(address transcoderAddr) returns()
func (_StakingManager *StakingManagerSession) Unjail(transcoderAddr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.Unjail(&_StakingManager.TransactOpts, transcoderAddr)
}

// Unjail is a paid mutator transaction binding the contract method 0x449ecfe6.
//
// Solidity: function unjail(address transcoderAddr) returns()
func (_StakingManager *StakingManagerTransactorSession) Unjail(transcoderAddr common.Address) (*types.Transaction, error) {
	return _StakingManager.Contract.Unjail(&_StakingManager.TransactOpts, transcoderAddr)
}

// WithdrawAllPending is a paid mutator transaction binding the contract method 0x5afd2faa.
//
// Solidity: function withdrawAllPending() returns()
func (_StakingManager *StakingManagerTransactor) WithdrawAllPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "withdrawAllPending")
}

// WithdrawAllPending is a paid mutator transaction binding the contract method 0x5afd2faa.
//
// Solidity: function withdrawAllPending() returns()
func (_StakingManager *StakingManagerSession) WithdrawAllPending() (*types.Transaction, error) {
	return _StakingManager.Contract.WithdrawAllPending(&_StakingManager.TransactOpts)
}

// WithdrawAllPending is a paid mutator transaction binding the contract method 0x5afd2faa.
//
// Solidity: function withdrawAllPending() returns()
func (_StakingManager *StakingManagerTransactorSession) WithdrawAllPending() (*types.Transaction, error) {
	return _StakingManager.Contract.WithdrawAllPending(&_StakingManager.TransactOpts)
}

// WithdrawPending is a paid mutator transaction binding the contract method 0x7edbceb1.
//
// Solidity: function withdrawPending() returns()
func (_StakingManager *StakingManagerTransactor) WithdrawPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakingManager.contract.Transact(opts, "withdrawPending")
}

// WithdrawPending is a paid mutator transaction binding the contract method 0x7edbceb1.
//
// Solidity: function withdrawPending() returns()
func (_StakingManager *StakingManagerSession) WithdrawPending() (*types.Transaction, error) {
	return _StakingManager.Contract.WithdrawPending(&_StakingManager.TransactOpts)
}

// WithdrawPending is a paid mutator transaction binding the contract method 0x7edbceb1.
//
// Solidity: function withdrawPending() returns()
func (_StakingManager *StakingManagerTransactorSession) WithdrawPending() (*types.Transaction, error) {
	return _StakingManager.Contract.WithdrawPending(&_StakingManager.TransactOpts)
}

// StakingManagerDelegatedIterator is returned from FilterDelegated and is used to iterate over the raw logs and unpacked data for Delegated events raised by the StakingManager contract.
type StakingManagerDelegatedIterator struct {
	Event *StakingManagerDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerDelegated represents a Delegated event raised by the StakingManager contract.
type StakingManagerDelegated struct {
	Transcoder common.Address
	Delegator  common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDelegated is a free log retrieval operation binding the contract event 0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b.
//
// Solidity: event Delegated(address indexed transcoder, address indexed delegator, uint256 indexed amount)
func (_StakingManager *StakingManagerFilterer) FilterDelegated(opts *bind.FilterOpts, transcoder []common.Address, delegator []common.Address, amount []*big.Int) (*StakingManagerDelegatedIterator, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "Delegated", transcoderRule, delegatorRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerDelegatedIterator{contract: _StakingManager.contract, event: "Delegated", logs: logs, sub: sub}, nil
}

// WatchDelegated is a free log subscription operation binding the contract event 0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b.
//
// Solidity: event Delegated(address indexed transcoder, address indexed delegator, uint256 indexed amount)
func (_StakingManager *StakingManagerFilterer) WatchDelegated(opts *bind.WatchOpts, sink chan<- *StakingManagerDelegated, transcoder []common.Address, delegator []common.Address, amount []*big.Int) (event.Subscription, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "Delegated", transcoderRule, delegatorRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerDelegated)
				if err := _StakingManager.contract.UnpackLog(event, "Delegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegated is a log parse operation binding the contract event 0xe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b.
//
// Solidity: event Delegated(address indexed transcoder, address indexed delegator, uint256 indexed amount)
func (_StakingManager *StakingManagerFilterer) ParseDelegated(log types.Log) (*StakingManagerDelegated, error) {
	event := new(StakingManagerDelegated)
	if err := _StakingManager.contract.UnpackLog(event, "Delegated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerJailedIterator is returned from FilterJailed and is used to iterate over the raw logs and unpacked data for Jailed events raised by the StakingManager contract.
type StakingManagerJailedIterator struct {
	Event *StakingManagerJailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerJailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerJailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerJailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerJailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerJailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerJailed represents a Jailed event raised by the StakingManager contract.
type StakingManagerJailed struct {
	Transcoder common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterJailed is a free log retrieval operation binding the contract event 0x519ec2af7b403e5bfa116afc87904cd6aa3e97a09cae81b522551191195674e7.
//
// Solidity: event Jailed(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) FilterJailed(opts *bind.FilterOpts, transcoder []common.Address) (*StakingManagerJailedIterator, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "Jailed", transcoderRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerJailedIterator{contract: _StakingManager.contract, event: "Jailed", logs: logs, sub: sub}, nil
}

// WatchJailed is a free log subscription operation binding the contract event 0x519ec2af7b403e5bfa116afc87904cd6aa3e97a09cae81b522551191195674e7.
//
// Solidity: event Jailed(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) WatchJailed(opts *bind.WatchOpts, sink chan<- *StakingManagerJailed, transcoder []common.Address) (event.Subscription, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "Jailed", transcoderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerJailed)
				if err := _StakingManager.contract.UnpackLog(event, "Jailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseJailed is a log parse operation binding the contract event 0x519ec2af7b403e5bfa116afc87904cd6aa3e97a09cae81b522551191195674e7.
//
// Solidity: event Jailed(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) ParseJailed(log types.Log) (*StakingManagerJailed, error) {
	event := new(StakingManagerJailed)
	if err := _StakingManager.contract.UnpackLog(event, "Jailed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StakingManager contract.
type StakingManagerOwnershipTransferredIterator struct {
	Event *StakingManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerOwnershipTransferred represents a OwnershipTransferred event raised by the StakingManager contract.
type StakingManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingManager *StakingManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerOwnershipTransferredIterator{contract: _StakingManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingManager *StakingManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerOwnershipTransferred)
				if err := _StakingManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StakingManager *StakingManagerFilterer) ParseOwnershipTransferred(log types.Log) (*StakingManagerOwnershipTransferred, error) {
	event := new(StakingManagerOwnershipTransferred)
	if err := _StakingManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the StakingManager contract.
type StakingManagerSlashedIterator struct {
	Event *StakingManagerSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerSlashed represents a Slashed event raised by the StakingManager contract.
type StakingManagerSlashed struct {
	Transcoder common.Address
	Rate       *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x4ed05e9673c26d2ed44f7ef6a7f2942df0ee3b5e1e17db4b99f9dcd261a339cd.
//
// Solidity: event Slashed(address indexed transcoder, uint256 indexed rate)
func (_StakingManager *StakingManagerFilterer) FilterSlashed(opts *bind.FilterOpts, transcoder []common.Address, rate []*big.Int) (*StakingManagerSlashedIterator, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}
	var rateRule []interface{}
	for _, rateItem := range rate {
		rateRule = append(rateRule, rateItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "Slashed", transcoderRule, rateRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerSlashedIterator{contract: _StakingManager.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x4ed05e9673c26d2ed44f7ef6a7f2942df0ee3b5e1e17db4b99f9dcd261a339cd.
//
// Solidity: event Slashed(address indexed transcoder, uint256 indexed rate)
func (_StakingManager *StakingManagerFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *StakingManagerSlashed, transcoder []common.Address, rate []*big.Int) (event.Subscription, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}
	var rateRule []interface{}
	for _, rateItem := range rate {
		rateRule = append(rateRule, rateItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "Slashed", transcoderRule, rateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerSlashed)
				if err := _StakingManager.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x4ed05e9673c26d2ed44f7ef6a7f2942df0ee3b5e1e17db4b99f9dcd261a339cd.
//
// Solidity: event Slashed(address indexed transcoder, uint256 indexed rate)
func (_StakingManager *StakingManagerFilterer) ParseSlashed(log types.Log) (*StakingManagerSlashed, error) {
	event := new(StakingManagerSlashed)
	if err := _StakingManager.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerStakeWithdrawalIterator is returned from FilterStakeWithdrawal and is used to iterate over the raw logs and unpacked data for StakeWithdrawal events raised by the StakingManager contract.
type StakingManagerStakeWithdrawalIterator struct {
	Event *StakingManagerStakeWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerStakeWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerStakeWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerStakeWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerStakeWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerStakeWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerStakeWithdrawal represents a StakeWithdrawal event raised by the StakingManager contract.
type StakingManagerStakeWithdrawal struct {
	UnbondingID *big.Int
	Delegator   common.Address
	Transcoder  common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStakeWithdrawal is a free log retrieval operation binding the contract event 0x544ab8c284dc3fe11e91e1be98918875679b41f64ade1d34b53fbfaab5e14f84.
//
// Solidity: event StakeWithdrawal(uint256 indexed unbondingID, address indexed delegator, address indexed transcoder, uint256 amount)
func (_StakingManager *StakingManagerFilterer) FilterStakeWithdrawal(opts *bind.FilterOpts, unbondingID []*big.Int, delegator []common.Address, transcoder []common.Address) (*StakingManagerStakeWithdrawalIterator, error) {

	var unbondingIDRule []interface{}
	for _, unbondingIDItem := range unbondingID {
		unbondingIDRule = append(unbondingIDRule, unbondingIDItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "StakeWithdrawal", unbondingIDRule, delegatorRule, transcoderRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerStakeWithdrawalIterator{contract: _StakingManager.contract, event: "StakeWithdrawal", logs: logs, sub: sub}, nil
}

// WatchStakeWithdrawal is a free log subscription operation binding the contract event 0x544ab8c284dc3fe11e91e1be98918875679b41f64ade1d34b53fbfaab5e14f84.
//
// Solidity: event StakeWithdrawal(uint256 indexed unbondingID, address indexed delegator, address indexed transcoder, uint256 amount)
func (_StakingManager *StakingManagerFilterer) WatchStakeWithdrawal(opts *bind.WatchOpts, sink chan<- *StakingManagerStakeWithdrawal, unbondingID []*big.Int, delegator []common.Address, transcoder []common.Address) (event.Subscription, error) {

	var unbondingIDRule []interface{}
	for _, unbondingIDItem := range unbondingID {
		unbondingIDRule = append(unbondingIDRule, unbondingIDItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "StakeWithdrawal", unbondingIDRule, delegatorRule, transcoderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerStakeWithdrawal)
				if err := _StakingManager.contract.UnpackLog(event, "StakeWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeWithdrawal is a log parse operation binding the contract event 0x544ab8c284dc3fe11e91e1be98918875679b41f64ade1d34b53fbfaab5e14f84.
//
// Solidity: event StakeWithdrawal(uint256 indexed unbondingID, address indexed delegator, address indexed transcoder, uint256 amount)
func (_StakingManager *StakingManagerFilterer) ParseStakeWithdrawal(log types.Log) (*StakingManagerStakeWithdrawal, error) {
	event := new(StakingManagerStakeWithdrawal)
	if err := _StakingManager.contract.UnpackLog(event, "StakeWithdrawal", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerTranscoderRegisteredIterator is returned from FilterTranscoderRegistered and is used to iterate over the raw logs and unpacked data for TranscoderRegistered events raised by the StakingManager contract.
type StakingManagerTranscoderRegisteredIterator struct {
	Event *StakingManagerTranscoderRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerTranscoderRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerTranscoderRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerTranscoderRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerTranscoderRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerTranscoderRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerTranscoderRegistered represents a TranscoderRegistered event raised by the StakingManager contract.
type StakingManagerTranscoderRegistered struct {
	Transcoder common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTranscoderRegistered is a free log retrieval operation binding the contract event 0x6fbcf0f12b438f90175bebf725f86a4a74d12525d5d2c144a68e400696bce58b.
//
// Solidity: event TranscoderRegistered(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) FilterTranscoderRegistered(opts *bind.FilterOpts, transcoder []common.Address) (*StakingManagerTranscoderRegisteredIterator, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "TranscoderRegistered", transcoderRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerTranscoderRegisteredIterator{contract: _StakingManager.contract, event: "TranscoderRegistered", logs: logs, sub: sub}, nil
}

// WatchTranscoderRegistered is a free log subscription operation binding the contract event 0x6fbcf0f12b438f90175bebf725f86a4a74d12525d5d2c144a68e400696bce58b.
//
// Solidity: event TranscoderRegistered(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) WatchTranscoderRegistered(opts *bind.WatchOpts, sink chan<- *StakingManagerTranscoderRegistered, transcoder []common.Address) (event.Subscription, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "TranscoderRegistered", transcoderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerTranscoderRegistered)
				if err := _StakingManager.contract.UnpackLog(event, "TranscoderRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTranscoderRegistered is a log parse operation binding the contract event 0x6fbcf0f12b438f90175bebf725f86a4a74d12525d5d2c144a68e400696bce58b.
//
// Solidity: event TranscoderRegistered(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) ParseTranscoderRegistered(log types.Log) (*StakingManagerTranscoderRegistered, error) {
	event := new(StakingManagerTranscoderRegistered)
	if err := _StakingManager.contract.UnpackLog(event, "TranscoderRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerUnbondingRequestedIterator is returned from FilterUnbondingRequested and is used to iterate over the raw logs and unpacked data for UnbondingRequested events raised by the StakingManager contract.
type StakingManagerUnbondingRequestedIterator struct {
	Event *StakingManagerUnbondingRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerUnbondingRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerUnbondingRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerUnbondingRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerUnbondingRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerUnbondingRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerUnbondingRequested represents a UnbondingRequested event raised by the StakingManager contract.
type StakingManagerUnbondingRequested struct {
	UnbondingID *big.Int
	Delegator   common.Address
	Transcoder  common.Address
	Readiness   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUnbondingRequested is a free log retrieval operation binding the contract event 0x9dad13c763cec66db8f825b1cfac1e63b0010e3dcb615d11aa95f160d7c34d7b.
//
// Solidity: event UnbondingRequested(uint256 indexed unbondingID, address indexed delegator, address indexed transcoder, uint256 readiness)
func (_StakingManager *StakingManagerFilterer) FilterUnbondingRequested(opts *bind.FilterOpts, unbondingID []*big.Int, delegator []common.Address, transcoder []common.Address) (*StakingManagerUnbondingRequestedIterator, error) {

	var unbondingIDRule []interface{}
	for _, unbondingIDItem := range unbondingID {
		unbondingIDRule = append(unbondingIDRule, unbondingIDItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "UnbondingRequested", unbondingIDRule, delegatorRule, transcoderRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerUnbondingRequestedIterator{contract: _StakingManager.contract, event: "UnbondingRequested", logs: logs, sub: sub}, nil
}

// WatchUnbondingRequested is a free log subscription operation binding the contract event 0x9dad13c763cec66db8f825b1cfac1e63b0010e3dcb615d11aa95f160d7c34d7b.
//
// Solidity: event UnbondingRequested(uint256 indexed unbondingID, address indexed delegator, address indexed transcoder, uint256 readiness)
func (_StakingManager *StakingManagerFilterer) WatchUnbondingRequested(opts *bind.WatchOpts, sink chan<- *StakingManagerUnbondingRequested, unbondingID []*big.Int, delegator []common.Address, transcoder []common.Address) (event.Subscription, error) {

	var unbondingIDRule []interface{}
	for _, unbondingIDItem := range unbondingID {
		unbondingIDRule = append(unbondingIDRule, unbondingIDItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "UnbondingRequested", unbondingIDRule, delegatorRule, transcoderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerUnbondingRequested)
				if err := _StakingManager.contract.UnpackLog(event, "UnbondingRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnbondingRequested is a log parse operation binding the contract event 0x9dad13c763cec66db8f825b1cfac1e63b0010e3dcb615d11aa95f160d7c34d7b.
//
// Solidity: event UnbondingRequested(uint256 indexed unbondingID, address indexed delegator, address indexed transcoder, uint256 readiness)
func (_StakingManager *StakingManagerFilterer) ParseUnbondingRequested(log types.Log) (*StakingManagerUnbondingRequested, error) {
	event := new(StakingManagerUnbondingRequested)
	if err := _StakingManager.contract.UnpackLog(event, "UnbondingRequested", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StakingManagerUnjailedIterator is returned from FilterUnjailed and is used to iterate over the raw logs and unpacked data for Unjailed events raised by the StakingManager contract.
type StakingManagerUnjailedIterator struct {
	Event *StakingManagerUnjailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingManagerUnjailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingManagerUnjailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingManagerUnjailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingManagerUnjailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingManagerUnjailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingManagerUnjailed represents a Unjailed event raised by the StakingManager contract.
type StakingManagerUnjailed struct {
	Transcoder common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUnjailed is a free log retrieval operation binding the contract event 0xfa5039497ad9ba11f0eb5239b2614e925541bbcc0cf3476dd68e1927c86d33ff.
//
// Solidity: event Unjailed(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) FilterUnjailed(opts *bind.FilterOpts, transcoder []common.Address) (*StakingManagerUnjailedIterator, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.FilterLogs(opts, "Unjailed", transcoderRule)
	if err != nil {
		return nil, err
	}
	return &StakingManagerUnjailedIterator{contract: _StakingManager.contract, event: "Unjailed", logs: logs, sub: sub}, nil
}

// WatchUnjailed is a free log subscription operation binding the contract event 0xfa5039497ad9ba11f0eb5239b2614e925541bbcc0cf3476dd68e1927c86d33ff.
//
// Solidity: event Unjailed(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) WatchUnjailed(opts *bind.WatchOpts, sink chan<- *StakingManagerUnjailed, transcoder []common.Address) (event.Subscription, error) {

	var transcoderRule []interface{}
	for _, transcoderItem := range transcoder {
		transcoderRule = append(transcoderRule, transcoderItem)
	}

	logs, sub, err := _StakingManager.contract.WatchLogs(opts, "Unjailed", transcoderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingManagerUnjailed)
				if err := _StakingManager.contract.UnpackLog(event, "Unjailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnjailed is a log parse operation binding the contract event 0xfa5039497ad9ba11f0eb5239b2614e925541bbcc0cf3476dd68e1927c86d33ff.
//
// Solidity: event Unjailed(address indexed transcoder)
func (_StakingManager *StakingManagerFilterer) ParseUnjailed(log types.Log) (*StakingManagerUnjailed, error) {
	event := new(StakingManagerUnjailed)
	if err := _StakingManager.contract.UnpackLog(event, "Unjailed", log); err != nil {
		return nil, err
	}
	return event, nil
}
